{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Test","text":""},{"location":"cyber_security/","title":"Cyber Security","text":"<p>PortSwigger</p> <p>SCA - Software Composition Analysis</p> <p>SAST - Static Application Security Testing</p> <p>DAST - Dynamic Application Security Testing</p> <p>DevSecOps</p> <p>AuthN, AuthZ</p> <p>OWASP top 10</p>"},{"location":"cyber_security/#sqli","title":"SQLi","text":"<p>escape characters</p>"},{"location":"dsa/","title":"Data Structures &amp; Algorithms","text":"<p>sorting</p> <p>searching</p> <p>graph algorithms</p> <p>dynamic programming</p>"},{"location":"git/","title":"Git","text":"<p>Book</p> <p>upcoming: - cherry-picking - force-with-lease - squash</p>"},{"location":"git/#basics","title":"Basics","text":"<p>initialize empty git repo <code>git init &lt;repo-name&gt;</code></p> <p>push repo to remote: <pre><code>git remote add origin &lt;repo-url&gt;\ngit push origin master\n</code></pre></p> <p>clone repo locally <code>git clone &lt;repo-url&gt;</code></p> <p>configuration <pre><code>git config --global user.email \"user@gmail.com\"\ngit config --global user.name \"user\"\n</code></pre></p> <p>repository status <code>git status</code></p> <p>specific filechanges <code>git diff &lt;file-name&gt;</code></p> <p>get quick overview of last repo change <code>git log --oneline</code></p> <p>undo changes <code>git revert &lt;git-hash&gt;</code></p> <p>add file to staging area <code>git add &lt;filename&gt;</code></p> <p>commit changes to repo <code>git commit -m '&lt;commit-message&gt;'</code></p> <p>push changes to remote server <code>git push</code></p> <p>get latest changes from remote <code>git pull</code></p> <p>ignore files and dirs by adding their relative paths to the following file <code>.gitignore</code></p>"},{"location":"git/#branching","title":"Branching","text":"<p>create new branch <code>git checkout -B '&lt;new-branch-name&gt;'</code></p> <p>delete branch <code>git branch -D '&lt;branch-to-delete&gt;'</code></p> <p>upcoming: rebase</p>"},{"location":"git/#inspect-recent-changes","title":"Inspect recent changes","text":"<p>e.g. for the <code>src</code> dir, <code>git whatchanged --since=\"last Sunday\" -p -- src</code></p>"},{"location":"git/#fixing-detached-head-when-on-feature-branch","title":"Fixing detached HEAD, when on feature branch","text":"<pre><code>git pull --rebase origin main\ngit log\ngit push --force\n</code></pre>"},{"location":"git/#remove-all-git-history-from-repo","title":"Remove all git history from repo","text":"<pre><code>#!/usr/local/bin/bash\n\n# prerequisites:\n# all tags deleted\n# main branch is the only branch that exists\n\n: '\ngit checkout --orphan last\ngit add -A\ngit commit -am \"feat: rewrite git history\" --no-verify\ngit branch -D main\ngit branch -m main\ngit push -f origin main -v\ncd .git\ngit reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive\n# check size:\ndu -hs .\ndu -hs .git\n'\n</code></pre>"},{"location":"kerberos/","title":"Kerberos","text":""},{"location":"kerberos/#terminology","title":"Terminology","text":"<p>realms: systems Kerberos can authenticate users onto principal: unique identity of user or service (within realm) client: process that accesses service on behalf of user</p> <p>there can be multiple clients and users within realms</p> <p>service: resource provided to a client (e.g. file server, application)</p> <p>KDC: Key Distribution Center. Supplies tickets and generates temporary session keys, allowing a user to securely authenticate to a service. Stores secret symmetric keys for users and services. Has two servers:</p> <ul> <li>authentication server: confirms that a known user is making an access request, and issues ticket granting tickets.</li> <li>ticket granting server: confirms that a user is making an access request to a known service, and issues service tickets.</li> </ul> <p>during the authentication, multiple messages are sent. Two important types of messages:</p> <ul> <li>Authenticators (allows mutual authentication between user and service)</li> <li>Tickets (contains info such as client id, service id. All encrypted using server's secret key)</li> </ul>"},{"location":"kerberos/#useful-commands","title":"Useful commands","text":"<p>destroys Kerberos tickets <code>/usr/bin/kdestroy</code></p> <p>obtains and caches Kerberos ticket-granting ticket <code>/usr/bin/kinit</code></p> <p>displays current Kerberos tickets <code>/usr/bin/klist</code></p> <p>changes a Kerberos password <code>/usr/bin/kpasswd</code></p> <p>manages Kerberos keytab files <code>/usr/bin/ktutil</code></p>"},{"location":"markdown/","title":"Markdown","text":""},{"location":"markdown/#links","title":"Links","text":"<p>Link text Here</p>"},{"location":"markdown/#collapsible-markdown","title":"Collapsible MarkDown","text":"<p>Source: https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab</p> Click to expand!    ## Heading   1. A numbered   2. list      * With some      * Sub bullets"},{"location":"markdown/#a-collapsible-section-containing-code","title":"A collapsible section containing code","text":"Click to expand! <pre><code>  function whatIsLove() {\n    console.log('Baby Don't hurt me. Don't hurt me');\n    return 'No more';\n  }\n</code></pre>"},{"location":"networking/","title":"Networking","text":"<p>OSI</p> <p>most common HTTP methods: - Get (read) - Post (create) - Put (update) - Delete (delete) these corresponds to each operation in CRUD</p>"},{"location":"redis/","title":"REDIS","text":"<p><code>REDIS</code>: REmote DIctionary Server</p> <p>used by Twitter, Pinterest, craigslist etc.</p> <p>in-memory, multi-model database from 2009 (created by Salvatore Sanfilippo)</p> <p>READ / WRITE quickly by using main computer memory</p> <p>but stores data on disk, so can be reconstructed as needed, making the database durable, supporting snapshots and backups.</p> <p>support for graphs, JSON documents, full-text search, and more.</p> <p>sub-millisecond latency</p> <p>Interact using <code>SET</code> and <code>GET</code> commands</p>"},{"location":"regex/","title":"Regular Expressions","text":""},{"location":"regex/#resourses","title":"Resourses","text":"<p>rexegg regex101</p>"},{"location":"regex/#quantifiers","title":"Quantifiers","text":"<p><code>*</code>: 0 or more <code>+</code>: 1 or more <code>?</code>: 0 or 1 <code>{3}</code>: exact number <code>{3,4}</code>: range of numbers (minimum, maximum)</p>"},{"location":"regex/#special-characters","title":"Special characters","text":"<p><code>.</code>: any character except new line <code>\\d</code>: digit (0-9) <code>\\D</code>: not a digit (0-9) <code>\\w</code>: word character (a-z, A-Z, 0-9, _) <code>\\W</code>: not a word character <code>\\s</code>: whitespace (space, tab, newline) <code>\\S</code>: not whitespace (space, tab, newline) <code>\\b</code>: word boundary <code>\\B</code>: not a word boundary</p>"},{"location":"regex/#anchors","title":"Anchors","text":"<p><code>^</code>: beginning of string <code>$</code>: end of string</p>"},{"location":"regex/#character-sets","title":"Character sets","text":"<p><code>[]</code>: matches characters in brackets <code>[^ ]</code>: matches characters NOT in brackets <code>|</code>: either or</p>"},{"location":"regex/#capture-groups","title":"Capture groups","text":"<p><code>( )</code>: group</p>"},{"location":"regex/#back-referencing","title":"Back referencing","text":""},{"location":"regex/#positive-negative-look-ahead-look-behind","title":"Positive / Negative Look-ahead / Look-behind","text":""},{"location":"regex/#examples","title":"Examples","text":"<p>email: <code>[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+</code></p>"},{"location":"shortcuts/","title":"Shortcuts","text":"OS Shortcuts  | action | macOS | Windows | | :----- | :---: | ------: | | run | | `Win + R` | |\u00a0new explorer window |\u00a0`Shift + Cmd + N` | `Win + E` | | toggle dock | `Cmd + Option + D` | |   Terminal Shortcuts  | action | macOS | Windows | | :----- | :---: | ------: | | clear terminal screen | `Ctrl + L` | `Ctrl + L` | | zoom in/out | `Cmd +/-` | `Ctrl +/-` | | delete line | `Ctrl + U` | `Ctrl + U` | | front of line | `Ctrl + A` | `Ctrl + A` | | end of line | `Ctrl + E` | `Ctrl + E` |   VSCode Shortcuts  | action | macOS | Windows | | :-------- | :------: | ----: | | zoom in / out | `Cmd + +/-` | `Ctrl + +/-` | | new integrated terminal |\u00a0`Shift + Ctrl + ` ` | `Ctrl + \u00c6` | | multi-line cursor | `Shift + Cmd + L` or `Option + Cmd + UpArrow/DownArrow` | | | toggle file explorer | `Cmd + B` | `Ctrl + B` | |\u00a0comment in/out line | `Shift + Cmd + 7` | `Ctrl + '` | |\u00a0find next occurence | | `Ctrl + D` |  playground   Jupyter notebook  | action | macOS | Windows | | :-------- | :------: | ----: | | new cell | | |"},{"location":"CICD/azure-pipelines/","title":"Azure pipelines (ADO)","text":"<p>YAML schema</p> <pre><code>variables:\n- template: vars/vars.yml \n\nparameters:\n- name: DIRECTORY \n  type: string\n  default: \".\"\n\ntrigger:\n- main\n# - feature/*\n# TODO: add path(s)\n\npool: \n  vmImage: ubuntu-latest\n\nstages:\n- stage: CI\n  jobs:\n  - job: CIWork\n    steps:\n    - script: \"Do CI work\"\n\n- stage: Test\n  jobs:\n  - job: TestWork\n    steps:\n    - script: \"Do test work\"\n</code></pre>"},{"location":"IaC/terraform/","title":"Terraform","text":"<p>Written in Go</p> <p>HCL: Hashicorp Configuration Language</p> <p>Install CLI</p>"},{"location":"IaC/terraform/#script-naming","title":"script naming","text":"<p><code>main.tf</code></p> <pre><code>terraform {\n\n}\n</code></pre>"},{"location":"LangLab/JS/","title":"JavaScript","text":""},{"location":"LangLab/JS/#resources","title":"resources","text":"<ul> <li>Odin project</li> <li>RunJS</li> </ul>"},{"location":"LangLab/JS/#nodejs","title":"node.js","text":"<p>run JavaScript program locally <code>node programname.js</code> or <code>node .</code></p>"},{"location":"LangLab/JS/#data-types","title":"data types","text":"<ul> <li>boolean</li> <li>number</li> <li>string</li> </ul>"},{"location":"LangLab/JS/#branching","title":"branching","text":""},{"location":"LangLab/JS/#loops","title":"loops","text":"<p>Loop backwards through array: <pre><code>for (var i = arr.length - 1; i &gt;= 0; i--) {\n    // do something with arr[i]\n}\n</code></pre></p>"},{"location":"LangLab/JS/#reverse-array-without-reassigning","title":"reverse array without reassigning","text":"<pre><code>const arr = ['a', 'b', 'c'];\nconst reversed = arr.toReversed();\n</code></pre>"},{"location":"LangLab/JS/#functions","title":"functions","text":""},{"location":"LangLab/JS/#ternary-statement","title":"ternary statement","text":""},{"location":"LangLab/JS/#string-interpolation","title":"string interpolation","text":""},{"location":"LangLab/R/","title":"R","text":""},{"location":"LangLab/R/#rotate-x-label-in-ggplot","title":"rotate x-label in ggplot","text":"<p>Given an ggplot, <code>q</code>: <pre><code>q + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n</code></pre></p>"},{"location":"LangLab/Rust/","title":"code example, main.rs:","text":"<pre><code>fn main() {\n    println!('hello, world!');\n}\n</code></pre>"},{"location":"LangLab/Rust/#program-naming","title":"program naming","text":"<p><code>main.rs</code></p>"},{"location":"LangLab/Rust/#compilation","title":"compilation","text":"<p><code>rustc main.rs</code></p>"},{"location":"LangLab/python/Django/","title":"Django","text":"<p>The Python-based Django framework is used by:</p> <p>Upcoming: - configuring URLs - database model creation - dynamic data in templates - admin panel</p>"},{"location":"LangLab/python/Django/#setup-new-django-project","title":"Setup new Django project","text":"<p>installation: <code>pip install django</code></p> <p>start a new Django project <code>django-admin startproject workoutplans .</code></p> <p>install the testing framework (interface between pytest and django, with additional features) <code>pip install pytest-django</code></p> <p>start a new Django app <code>python manage.py startapp workoutapp</code></p> <p><code>cd - python manage.py startapp workoutapp</code></p> <p>add html template: <code>mkdir templates &amp;&amp; cd templates</code></p> <p><code>echo welcome page workout generator &gt; index.html</code></p> <p>Navigate to <code>project/myproject/settings.py</code>:</p> <p>add <code>import os</code></p> <p>update <code>TEMPLATES[\u201cDIRS\u201d]</code> with: <code>os.path.join(BASE_DIR, \"workoutapp/templates\")</code></p> <p>under <code>INSTALLED_APPS</code>, add an entry for the name of the new django app that was just created.</p>"},{"location":"LangLab/python/Django/#views","title":"Views","text":"<p>A view is a function that receives a request and returns a response.</p> <p>example, <code>workoutapp/views.py</code>: <pre><code>from django.shortcuts import render, HttpResponse\n\n\ndef home(request):\n    return HttpResponse(\"Welcome to the workoutapp\")\n</code></pre></p> <p>then in <code>workoutapp/urls.py</code>: <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.home, name=\"home\")\n]\n</code></pre></p> <p>then in <code>workoutplans/urls.py</code>: <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"workoutapp/\", include(\"workoutapp.urls\")),\n]\n</code></pre></p>"},{"location":"LangLab/python/Django/#development-server","title":"Development server","text":"<p>Run app <code>python manage.py runserver</code></p> <p>run Django app with the development server <code>python manage.py runserver (runs at local port 8000)</code></p> <p>if you wish to change port: <code>python manage.py runserver 8080</code></p> <p>then visit http://127.0.0.1:8000/workoutapp/welcome_view/</p>"},{"location":"LangLab/python/Django/#files","title":"Files","text":"<p>the special configuration files <code>asgi.py</code> and <code>wsgi.py</code> allow django to communicate with the web server.</p> <p>the <code>settings.py</code> file: to install django apps, plugins, middleware, or modify database engines.</p> <p>the <code>urls.py</code> file: configure different url routes, that can then be directed / routed to different Django applications.</p> <p>the <code>manage.py</code> file acts as a command line tool, and can be used for running the django development server, do database migrations, create users and more.</p> <p>the <code>models.py</code> file: here the database models are placed.</p> <p>the <code>admin.py</code> file: register database models so they can be viewed on the admin panel.</p> <p>the <code>tests.py</code> file: adding automated tewst cases.</p> <p>the <code>views.py</code> file: create different views or routes, that can be accessed from the website.</p>"},{"location":"LangLab/python/Django/#templates","title":"templates","text":"<p>example, create <code>templates/base.html</code>, populate using emmet, then add blocks, e.g. <pre><code>&lt;title&gt;{% block title %}workoutplans{% endblock %}&lt;/title&gt;\n</code></pre></p> <p>which uses the jinja templating engine, which allows displaying dynamic data.</p> <p>re-using template in <code>templates/home.html</code>: <pre><code>{% extends \"base.html\" %} {% block title %} Home {% endblock %}\n{% block content %}\n&lt;p&gt;welcome to the workoutplans home page&lt;/p&gt;\n{% endblock %}\n</code></pre></p>"},{"location":"LangLab/python/Django/#css","title":"CSS","text":"<ul> <li>bootstrap</li> <li>tailwind</li> </ul>"},{"location":"LangLab/python/Django/#run-django-app-with-docker","title":"Run Django app with Docker","text":"<pre><code>docker build --tag python-django .\ndocker run --publish 8000:8000 python-django\n</code></pre>"},{"location":"LangLab/python/Python/","title":"Python","text":""},{"location":"LangLab/python/Python/#data-types-and-methods","title":"Data types and methods","text":"<p>list: - zip - enumerate - reverse list: <code>some_list[::-1]</code></p> <p>dict: - get - setdefault</p> <p>example <pre><code>student_grades = {}\n\nspanish_grades = student_grades.setdefault(\"Roberto\", {})\nspanish_grades[\"spanish\"] = 90\nprint(student_grades)  # {\"Roberto\": {\"spanish\": 90}}\n</code></pre></p>"},{"location":"LangLab/python/Python/#for-else-and-while-else","title":"for-else and while-else","text":"<pre><code>nums = [1, 2, 3, 4, 5,]\nfind = 4\n\nfor num in nums:\n    if num == find:\n        print(f\"found {find} in the list.\")\n        break\nelse:\n    # This block will execute only if the loop completed without encountering a 'break'\n    print(f\"{find} was not found in the list.\")\n\n\ncount = 5\n\nwhile count &gt; 0:\n    print(count)\n    count -= 1\nelse:\n    # This block will execute once the condition in the while statement is no longer true\n    print(\"Liftoff!\")\n</code></pre>"},{"location":"LangLab/python/Python/#print","title":"print","text":"<p>pretty printing <pre><code>from pprint import pprint as pp\n\npp(some_dict)\n</code></pre></p> <pre><code>nums = [1, 2, 3, 4, 5,]\n\nprint(*nums, sep=\"-\", end=\"no new line after this string\")\n</code></pre>"},{"location":"LangLab/python/Python/#walrus-operator","title":"walrus operator","text":"<p>example <pre><code>numbers = [2, 8, 0, 1, 1, 9, 7, 7]\n\ndescription = {\n    \"length\": (num_length := len(numbers)),\n    \"sum\": (num_sum := sum(numbers)),\n    \"mean\": num_sum / num_length,\n}\n\nprint(description)  # {'length': 8, 'sum': 35, 'mean': 4.375}\n</code></pre></p>"},{"location":"LangLab/python/Python/#comprehensions","title":"comprehensions","text":"<p>list, dict, set, generator</p> <p>e.g. <code>some_list = [a for a in b if some_condition]</code></p>"},{"location":"LangLab/python/Python/#functional","title":"Functional","text":""},{"location":"LangLab/python/Python/#lambda-functions","title":"lambda functions","text":"<p>anonymous functions <code>z = lambda x: x * 3</code></p> <p>use lambda function to sort dictionary by specific key <pre><code>people = [\n    {\"name\": \"Oppenheimer\", \"age\": 62},\n    {\"name\": \"Einstein\", \"age\": 76},\n    {\"name\": \"Schubert\", \"age\": 31},\n]\n\npeople.sort(key=lambda person: person['age'])\n</code></pre></p>"},{"location":"LangLab/python/Python/#map","title":"map","text":"<pre><code>some_list = [1, 2, 4, 5, 6]\nnew_list = map(lambda z: z + 5, some_list)\n</code></pre>"},{"location":"LangLab/python/Python/#filter","title":"filter","text":""},{"location":"LangLab/python/Python/#reduce","title":"reduce","text":""},{"location":"LangLab/python/Python/#unknown-number-of-function-arguments","title":"unknown number of function arguments","text":"<pre><code>def some_function(*args, **kwargs):\n    print(args, kwargs)\n\n\nsome_function(5, y='five')\n</code></pre>"},{"location":"LangLab/python/Python/#swap-values","title":"Swap values","text":"<pre><code>a, b = b, a\n</code></pre>"},{"location":"LangLab/python/Python/#ternary-in-line-if-statement","title":"Ternary / in-line if statement","text":"<pre><code>some_var = 0 if condition else 1\n</code></pre>"},{"location":"LangLab/python/Python/#switch-case-structural-pattern-matching","title":"Switch-case / structural pattern matching","text":""},{"location":"LangLab/python/Python/#oop-dunder-methods","title":"OOP dunder methods","text":"<pre><code>__init__\n__eq__\n__repr__\n__call__\n</code></pre>"},{"location":"LangLab/python/Python/#decorators","title":"Decorators","text":"<p>e.g. the built-in <code>@staticmethod</code></p>"},{"location":"LangLab/python/Python/#generators","title":"Generators","text":"<p>e.g. if you only need access to a few items at a time, <pre><code>def firstn(n):\n    num = 0\n    while num &lt; n:\n        yield num\n        num += 1\n\n\nsum_of_first_n = sum(firstn(1_000))\n</code></pre></p>"},{"location":"LangLab/python/Python/#context-managers","title":"context managers","text":"<pre><code>with open(\"some_file.txt\", \"r\") as rf:\n    data = rf.readlines()\n</code></pre>"},{"location":"LangLab/python/Python/#metaclasses","title":"Metaclasses","text":""},{"location":"LangLab/python/Python/#concurrency-and-parallellism","title":"Concurrency and parallellism","text":"<p>GIL.</p> <p>multi-processing / multi-threading</p>"},{"location":"LangLab/python/Python/#testing","title":"Testing","text":"<p>TDD with Pytest</p>"},{"location":"LangLab/python/Python/#itertools","title":"Itertools","text":""},{"location":"LangLab/python/Python/#functools","title":"Functools","text":""},{"location":"LangLab/python/Python/#timing","title":"Timing","text":""},{"location":"LangLab/python/Python/#profiling","title":"Profiling","text":""},{"location":"LangLab/python/Python/#logging","title":"Logging","text":""},{"location":"LangLab/python/Python/#pathlib","title":"Pathlib","text":""},{"location":"LangLab/python/Python/#cookiecutter-and-cruft","title":"Cookiecutter and Cruft","text":""},{"location":"LangLab/python/Python/#build-and-publish-package","title":"build and publish package","text":""},{"location":"LangLab/python/args-and-kwargs/","title":"Args and Kwargs","text":"<pre><code>def func(foo, *args, **kwargs):\n    print(foo)\n    for arg in args:\n        print(arg)\n    for k, v in kwargs.items():\n        print(k)\n        print(v)\n\n\nfunc(\"foo\", [1,2,3], {\"a\": \"A\", \"b\": \"B\"})\n</code></pre>"},{"location":"LangLab/python/convert-filetype/","title":"Convert Filetype","text":"<pre><code>def get_txt_from_py(filename_orig: str):\n\u00a0\u00a0\u00a0 \"\"\".\"\"\"\n\u00a0\u00a0\u00a0 try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 import pypandoc\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return pypandoc.convert(filename_orig, 'txt')\n\u00a0\u00a0\u00a0 except Exception as ex:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 print(f\"Unable to convert {filename_orig} to txt: '{}'\".format(ex))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"\"\n\n\ndef long_lines(filename: str):\n\u00a0\u00a0\u00a0\u00a0 \"\"\".\"\"\"\n\u00a0\u00a0\u00a0\u00a0 with open(filename) as f:\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0for line_no, line in enumerate(f): \u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0 # Remember not to count the newline character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0if len(line.strip())\u00a0&gt; 79:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0print(line_no, line)\n\n\ndef main():\n\u00a0\u00a0\u00a0\u00a0 filename_orig\u00a0= \"read.py\"\n\u00a0\u00a0\u00a0\u00a0 filename = get_txt_from_py(filename_orig)\n\u00a0\u00a0\u00a0\u00a0 long_lines(filename)\n\n\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0 main()\n</code></pre>"},{"location":"LangLab/python/data-structures/","title":"Data Structures","text":""},{"location":"LangLab/python/data-structures/#deque","title":"Deque","text":"<pre><code>from collectiones import deque\n\npeople = ['Mario', 'Luigi', 'Toad', 'Peach']\nqueue = deque(people)\n\nqueue.append('Bowser')\nqueue.popleft()\nqueue.appendleft('Daisy')\nqueue.rotate(-1)\nqueue.extend(['Shy Guy', 'Yoshi']). # or in front: extendleft\nqueue.reverse()\nprint(queue)\n</code></pre> <p>double ended queue.</p> <p><code>list.pop</code> is slow, as elements from right needs to be index-shifted one place to the left afterwards, with an O(n). If done in a loop, this grows to space complexity of O(n^2). Deque might be faster, as it only updates the pointers/head.</p>"},{"location":"LangLab/python/itemgetter/","title":"Itemgetter","text":"<pre><code>from operator import itemgetter\n\nelements: list[int] = [1, 2, 3, 4, 5]\nfirst_and_last: itemgetter = itemgetter(0, -1)\nprint(first_and_last(elements))\n\nitems: dict[str, int] = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\na_and_c: itemgetter = itemgetter('a', 'c')\nprint(a_and_c(items))\n</code></pre>"},{"location":"LangLab/python/packaging/","title":"Packaging","text":"<p>To package and publish a Python module, you can use the following steps. We'll use setuptools for packaging and twine for uploading to the Python Package Index (PyPI).</p> <ol> <li> <p>Create a setup.py file: Create a setup.py file in the same directory as your module. This file contains information about your package, such as its name, version, and dependencies. Here's an example: <code>Python</code>      Replace 'your-module-name' with the actual name of your module and add other dependencies as needed.</p> </li> <li> <p>Create a README.md file:</p> <p>Create a README.md file in the same directory as your module. This file will provide information about your module, including how to install and use it.</p> </li> <li> <p>Build your package:</p> <p>Open a terminal in the directory containing your setup.py file and run the following command to build your package:</p> <p>This will create a dist directory with the packaged distribution files.</p> </li> <li> <p>Install twine:</p> <p>If you haven't installed twine yet, you can install it using pip:</p> </li> <li> <p>Upload your package to PyPI:</p> <p>Run the following command to upload your package to PyPI using twine:</p> <p>This assumes that you have already registered on PyPI and have the necessary credentials.</p> </li> <li> <p>Verify the upload:</p> <p>Visit https://pypi.org/project/your-module-name/ (replace 'your-module-name' with the actual name of your module) to verify that your package has been successfully uploaded.</p> </li> </ol> <p>Now, your Python module is published on PyPI and can be installed by others using: <code>pip install your-module-name</code></p>"},{"location":"LangLab/python/python-modules/","title":"Python Modules","text":"<ul> <li>Pendulum: https://pendulum.eustace.io</li> <li>PyPDF: https://pypi.org/project/pypdf/ </li> <li>Icecream: https://github.com/gruns/icecream </li> <li>Loguru: https://github.com/Delgan/loguru </li> <li>Rich: https://rich.readthedocs.io/en/stable... </li> <li>Argparse: https://docs.python.org/3/library/arg... </li> <li>Tqdm: https://github.com/tqdm/tqdm </li> <li>Xarray: https://github.com/pydata/xarray </li> <li>Polars: https://www.pola.rs </li> <li>Seaborn: https://seaborn.pydata.org/tutorial/i... </li> <li>Result: https://pypi.org/project/result/ </li> <li>Pydantic: https://docs.pydantic.dev/latest/ </li> <li>FastAPI: https://fastapi.tiangolo.com </li> <li>Sqlmodel: https://sqlmodel.tiangolo.com </li> <li>Httpx: https://github.com/encode/httpx </li> <li>Python-dotenv: https://saurabh-kumar.com/python-dotenv/</li> <li>orjson</li> <li>click (for CLIs)</li> <li>msgspec</li> <li>more_itertools</li> </ul>"},{"location":"LangLab/python/radon/","title":"radon","text":"<p>https://github.com/adminho/python-examples/tree/master/love%20formula https://pypi.org/project/radon/</p> <p><code>pip install radon</code></p> <p>https://radon.readthedocs.io/en/latest/ https://github.com/rubik/radon/issues/64</p> <pre><code>from radon.raw import analyze\nfrom radon.metrics import mi_visit\nfrom radon.complexity import cc_visit\nfrom radon.cli.tools import iter_filenames\n\n# iter through filenames starting from the current directory\n# you can pass ignore or exclude patterns here (as strings)\n# for example: ignore='tests,docs'for filename in iter_filenames(['.']):\n\nwith open(filename) as fobj:\n    source = fobj.read()\n\n# get cc blocks\nblocks = cc_visit(source)\n\n# get MI score\nmi = mi_visit(source, True)\n\n# get raw metrics\nraw = analyze(source)\n\n# Now do what you want with the data\n</code></pre>"},{"location":"LangLab/python/sphinx/","title":"Sphinx","text":"<pre><code>mkdir docs &amp;&amp; cd docs\n\nsphinx-quickstart\n\n# edit conf.py\n\nsphinx-apidoc -o ./ ../src\n# or:\nsphinx-apidoc -o ./source ../src\n\nmake clean\n\nmake html\n</code></pre>"},{"location":"LangLab/python/virtual_environments/","title":"Virtual Environments","text":""},{"location":"LangLab/python/virtual_environments/#poetry","title":"Poetry","text":"<p>create new poetry project <code>poetry init</code></p> <p>create virtual env inside project dir <code>poetry config virtualenvs.in-project true</code></p> <p>create virtual env <code>poetry install</code></p> <p>inspect <code>poetry env info</code></p> <p>inspect path <code>poetry env info -p</code></p> <p>activate virtual env <code>poetry shell</code></p> <p>run tests <code>pytest</code></p> <p>install django <code>poetry add django</code></p> <p>uninstall <code>poetry remove some-package</code></p> <p>close virtual env shell <code>exit</code></p> <p>check which virtual env is active <code>poetry env list</code></p> <p>close shell and deactivate virtual env <code>deactivate</code></p>"},{"location":"LangLab/python/design-patterns/factory-pattern/","title":"Factory Pattern","text":"<p><code>people.csv</code></p> <pre><code>Alice Smith,60,Harvard University,History\nMichael Smith,27,Princeton University,Mechanical Engineering\nBob Davis,43,Yale University,Biology\n</code></pre> <pre><code>class Person:\n    def __init__(self, name, age, university, degree):\n        self.name = name.title()\n        self.age = age\n        self.university = university.title()\n        self.degree = degree.capitalize()\n\n    @classmethod\n    def from_csv_line(cls, line: str) -&gt; \"Person\":\n        return cls(*line.strip().split(\",\"))\n\n\nwith open(\"people.csv\", \"r\") as rf:\n    lines = rf.readlines()\n\npeople = map(Person.from_csv_line, lines)\n\nfor person in people:\n    print(\n        f\"{person.name} is {person.age},\"\n        f\"studying {person.degree} at {person.university}.\"\n    )\n</code></pre>"},{"location":"LangLab/python/design-patterns/overview/","title":"Overview","text":""},{"location":"LangLab/python/design-patterns/overview/#references","title":"References","text":"<p>python-patterns python-parameterized-design-patterns</p>"},{"location":"LangLab/python/design-patterns/overview/#overview-examples","title":"Overview &amp; examples","text":"<p>Design patterns are common solutions to recurring problems in software design. They provide a standard terminology and are specific to particular scenarios. Here\u2019s an overview of some key design patterns implemented in Python:</p>"},{"location":"LangLab/python/design-patterns/overview/#1-singleton-pattern","title":"1. Singleton Pattern","text":"<p>The Singleton ensures a class has only one instance and provides a global point of access to it. This is useful for scenarios like database connections or configurations where multiple instances would cause issues.</p> <p>Python Example: <pre><code>class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n\n# Usage\nsingleton1 = Singleton()\nsingleton2 = Singleton()\n\nprint(singleton1 == singleton2)  # Output: True\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#2-factory-pattern","title":"2. Factory Pattern","text":"<p>The Factory pattern provides an interface for creating objects, but allows subclasses to alter the type of objects that will be created. This decouples object creation from its implementation.</p> <p>Python Example: <pre><code>class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow\"\n\nclass AnimalFactory:\n    @staticmethod\n    def get_animal(animal_type):\n        if animal_type == \"dog\":\n            return Dog()\n        elif animal_type == \"cat\":\n            return Cat()\n        return None\n\n# Usage\nanimal = AnimalFactory.get_animal(\"dog\")\nprint(animal.speak())  # Output: Woof\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#3-observer-pattern","title":"3. Observer Pattern","text":"<p>The Observer pattern defines an one-to-many relationship between objects, where a change in one object leads to an update in others. It is often used in event handling systems.</p> <p>Python Example: <pre><code>class Subject:\n    def __init__(self):\n        self._observers = []\n\n    def register(self, observer):\n        self._observers.append(observer)\n\n    def notify_all(self, message):\n        for observer in self._observers:\n            observer.update(message)\n\nclass Observer:\n    def update(self, message):\n        pass\n\nclass ConcreteObserver(Observer):\n    def update(self, message):\n        print(f\"Observer received message: {message}\")\n\n# Usage\nsubject = Subject()\nobserver1 = ConcreteObserver()\nobserver2 = ConcreteObserver()\n\nsubject.register(observer1)\nsubject.register(observer2)\n\nsubject.notify_all(\"Pattern design is fun!\")  # Both observers receive the message\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#4-decorator-pattern","title":"4. Decorator Pattern","text":"<p>The Decorator pattern adds new functionality to an existing object dynamically. This is especially useful for adhering to the Open-Closed Principle (open for extension, closed for modification).</p> <p>Python Example: <pre><code>def make_bold(func):\n    def wrapper():\n        return \"&lt;b&gt;\" + func() + \"&lt;/b&gt;\"\n    return wrapper\n\ndef make_italic(func):\n    def wrapper():\n        return \"&lt;i&gt;\" + func() + \"&lt;/i&gt;\"\n    return wrapper\n\n@make_bold\n@make_italic\ndef greet():\n    return \"Hello\"\n\n# Usage\nprint(greet())  # Output: &lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#5-strategy-pattern","title":"5. Strategy Pattern","text":"<p>The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. It lets the algorithm vary independently from clients that use it.</p> <p>Python Example: <pre><code>class Strategy:\n    def execute(self, data):\n        pass\n\nclass ConcreteStrategyA(Strategy):\n    def execute(self, data):\n        return sorted(data)\n\nclass ConcreteStrategyB(Strategy):\n    def execute(self, data):\n        return sorted(data, reverse=True)\n\nclass Context:\n    def __init__(self, strategy: Strategy):\n        self.strategy = strategy\n\n    def set_strategy(self, strategy: Strategy):\n        self.strategy = strategy\n\n    def execute_strategy(self, data):\n        return self.strategy.execute(data)\n\n# Usage\ndata = [5, 3, 8, 1]\ncontext = Context(ConcreteStrategyA())\nprint(context.execute_strategy(data))  # Output: [1, 3, 5, 8]\n\ncontext.set_strategy(ConcreteStrategyB())\nprint(context.execute_strategy(data))  # Output: [8, 5, 3, 1]\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#6-adapter-pattern","title":"6. Adapter Pattern","text":"<p>The Adapter pattern allows incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces.</p> <p>Python Example: <pre><code>class EuropeanSocket:\n    def voltage(self):\n        return 230\n\n    def live(self):\n        return 1\n\n    def neutral(self):\n        return -1\n\nclass USASocket:\n    def voltage(self):\n        return 120\n\n    def live(self):\n        return 1\n\n    def neutral(self):\n        return 0\n\nclass SocketAdapter:\n    def __init__(self, usa_socket):\n        self.usa_socket = usa_socket\n\n    def voltage(self):\n        return self.usa_socket.voltage()\n\n    def live(self):\n        return self.usa_socket.live()\n\n    def neutral(self):\n        return self.usa_socket.neutral()\n\n# Usage\nusa_socket = USASocket()\nadapter = SocketAdapter(usa_socket)\n\nprint(f\"Adapter voltage: {adapter.voltage()}V\")  # Output: Adapter voltage: 120V\n</code></pre></p>"},{"location":"LangLab/python/design-patterns/overview/#7-command-pattern","title":"7. Command Pattern","text":"<p>The Command pattern turns a request into a stand-alone object that contains all information about the request. This is useful for undo functionality, queues of operations, etc.</p> <p>Python Example: <pre><code>class Command:\n    def execute(self):\n        pass\n\nclass LightOnCommand(Command):\n    def __init__(self, light):\n        self.light = light\n\n    def execute(self):\n        self.light.on()\n\nclass LightOffCommand(Command):\n    def __init__(self, light):\n        self.light = light\n\n    def execute(self):\n        self.light.off()\n\nclass Light:\n    def on(self):\n        print(\"Light is ON\")\n\n    def off(self):\n        print(\"Light is OFF\")\n\nclass RemoteControl:\n    def __init__(self, command: Command):\n        self.command = command\n\n    def press(self):\n        self.command.execute()\n\n# Usage\nlight = Light()\nlight_on = LightOnCommand(light)\nlight_off = LightOffCommand(light)\n\nremote = RemoteControl(light_on)\nremote.press()  # Output: Light is ON\n\nremote = RemoteControl(light_off)\nremote.press()  # Output: Light is OFF\n</code></pre></p> <p>These patterns are widely used to solve design problems and make systems more maintainable, extensible, and scalable. They encapsulate best practices that help developers tackle common software design challenges.</p>"},{"location":"LangLab/typescript/TS/","title":"TypeScript","text":""},{"location":"LangLab/typescript/TS/#resources","title":"Resources","text":"<p>book</p> <p>Doc</p>"},{"location":"LangLab/typescript/TS/#language-features","title":"Language features","text":"<p>Strongly typed. Superset of JavaScript.</p>"},{"location":"LangLab/typescript/TS/#check-type","title":"check type","text":"<p><code>typeof</code></p>"},{"location":"LangLab/typescript/TS/#ignore-type","title":"ignore type","text":"<pre><code>let z: number = 3\n\n// @ts-ignore\nz = \"code-vault\"\n</code></pre>"},{"location":"LangLab/typescript/TS/#compilation","title":"compilation","text":"<p>compilation (to JS, EcmaScript 3) with <code>tsc</code>.</p> <p>check version: <code>tsc --version</code>.</p> <p>example, <code>index.ts</code>:</p> <pre><code>console.log('hello code-vault')\n\n\nasync function hello() {\n    return 'code-vault'\n}\n\n\nconst url = new URL('...')  // . for auto-complete\n</code></pre> <p>compile: <code>tsc index.ts</code></p>"},{"location":"LangLab/typescript/TS/#configuration","title":"configuration","text":"<p>create a configuration, <code>tsconfig.json</code>, for the compiler: <code>touch tsconfig.json</code></p> <p>then add following content (specifying latest version of JS): <pre><code>{\n    \"compilerOptions\": {\n        \"target\": \"esnext\",\n        \"watch\": true,\n        \"lib\": [\"dom\", \"es2017\"]\n    }\n}\n</code></pre></p> <p><code>target</code>: version of JS to compile into. <code>watch</code>: automatically recompile for every file change (save) <code>lib</code>: automatically include typing for certain environments</p>"},{"location":"LangLab/typescript/TS/#third-party-libraries","title":"Third party libraries","text":"<p><code>npm i lodash</code></p> <p>creates <code>node_modules</code> folder, with the source code for <code>lodash</code>.</p> <p><code>index.ts</code>:</p> <pre><code>import * as _ from 'lodash';\n\n\nasync function hello() {\n    return 'code-vault'\n}\n\n\n_.pickBy()\n</code></pre> <p><code>lodash</code> comes without built-in types. install types: <code>npm i -D @types/lodash</code></p>"},{"location":"LangLab/typescript/TS/#type-annotations","title":"Type annotations","text":"<pre><code>// implicit type\nlet lucky = 23;\n\n// opt out of the type system with the any keyword\nlet also_lucky: any = 23;\n\n// then also_lucky can be re-assigned to any value (and the compiler won't type-check it)\nalso_lucky = '23'\n\n// without value or type assignment, a new variable is assigned the any type:\nlet very_lucky;\nvery_lucky = '23'\nvery_lucky = 23\n\n// if there is an implicit type, don't botherexplicitly typing it.\n// instead of:\nlet super_lucky: number = 23;\n// do this instead:\nlet super_lucky = 23;\n\n// built in types from JS are available, and we can also built our own types\n</code></pre>"},{"location":"LangLab/typescript/TS/#custom-types","title":"Custom types","text":"<p>name commonly in PascalCase</p> <pre><code>// type Style = string;\ntype Style = 'bold' | 'italic';  // union type\n\nlet font: Style;\n\nfont = 'bold'\n\n// Allow any additional fields with the any keyword\ninterface Person {\n    first: string;\n    last: string;\n    [key: string]: any\n}\n\nconst person: Person = {\n    first: 'John',\n    last: 'Connor'\n}\n\nconst person2: Person = {\n    first: 'Jonas',\n    last: 'Vingegaard',\n    gc_cyclist: true\n}\n</code></pre>"},{"location":"LangLab/typescript/TS/#types-in-functions","title":"Types in functions","text":"<pre><code>function pow(x: number, y: number): string {\n    return Math.pow(x, y).toString();\n}\n\n\nfunction pow(x: number, y: number): void {\n    Math.pow(x, y).toString();\n}\n</code></pre>"},{"location":"LangLab/typescript/TS/#arrays","title":"Arrays","text":"<pre><code>const arr: number[] = []\n\narr.push(1)\narr.push('23')\narr.push(false)\n\nconst arr: Person[] = []\n\n// Tuple with optional values\ntype MyList = [number?, string?, boolean?]\n</code></pre>"},{"location":"LangLab/typescript/TS/#generics","title":"Generics","text":"<p>allow for specifying internal type later in the code, by using <code>&lt;T&gt;</code> <pre><code>class Observable&lt;T&gt; {\n    constructor(public value: T) {}\n}\n\nlet x: Observable&lt;number&gt;;\n\nlet y: Observable&lt;Person&gt;;\n\nlet z = new Observable(23);  // implicitly get number type\n</code></pre></p>"},{"location":"LangLab/typescript/TS/#using-undefined","title":"using undefined","text":"<pre><code>type Animal = {\n    name: string\n    legs?: number\n}\n\n\nconst printAnimal = (animal: Animal) =&gt; {\n    const x = (animal.legs ? animal.legs : 0)\n}\n\n\nconst dog = {\n    name = \"kerberos\"\n}\n\n\nprintAnimal(dog)\n</code></pre>"},{"location":"LangLab/typescript/TS/#combining-types","title":"combining types","text":"<pre><code>type Monkey = {\n    diet: string\n} &amp; Animal\n</code></pre>"},{"location":"LangLab/typescript/TS/#sets","title":"sets","text":"<pre><code>const s: new Set&lt;number&gt;();\n</code></pre>"},{"location":"LangLab/typescript/TS/#interfaces","title":"interfaces","text":"<pre><code>type Fish = {\n    name: string\n    swim: () =&gt; void\n}\n\n\ntype Dog = {\n    name: string\n    bark: () =&gt; void\n}\n\n\n// const printName = (animal: Dog | Fish) =&gt; {\n//     console.log(animal.name)\n// }\n\n// Use interface to ensure something getting passed to certain function has certain properties on them\ninterface Animal {\n    name: string;\n}\n\n\nconst printName = (animal: Animal) =&gt; {\n    console.log(animal.name)\n}\n</code></pre>"},{"location":"LangLab/typescript/TS/#enums","title":"enums","text":"<p>useful if the values change later (e.g. \"Small\" to \"small\"), only change in one place <pre><code>enum ShirtSize = {\n    Small = \"Small\",\n    Medium = \"Medium\",\n    Large = \"Large\"\n}\n\n\nconst getShirtPrice = (shirtSize: ShirtSize) =&gt; {\n    switch (shirtSize) {\n        case ShirtSize.Small:\n            return 10\n        case ShirtSize.Medium:\n            return 20\n        case ShirtSize.Large:\n            return 30\n    }\n}\n\n\nconst price = getShirtPrice(ShirtSize.Small)\n</code></pre></p>"},{"location":"LangLab/typescript/TS/#type-guard-custom-guard","title":"type guard / custom guard","text":"<pre><code>const isFish = (animal: Fish | Dog): animal is Fish =&gt; {\n    return (animal as Fish).swim() !== undefined\n}\n\n\nconst callAnimalFunc = (animal: Fish | Dog) =&gt; {\n    if (isFish(animal)) animal.swim()\n    else animal.bark()\n}\n</code></pre>"},{"location":"LangLab/typescript/conditional_properties/","title":"Conditional properties","text":"<pre><code>type Props = {\n    name: string\n} &amp; (CardioProps | StrengthProps)\n\ntype CardioProps = {\n    training: 'cardio'\n    vo2_max: number\n}\n\ntype StrengthProps = {\n    training: 'strength'\n    one_rm: number\n}\n\nconst Child = (props: Props) =&gt; {\n\n    if (props.training === 'cardio') {\n        console.log(props.vo2_max)\n    } else if (props.training === 'strength') {\n        console.log(props.one_rm)\n    }\n\n    return &lt;div&gt;child&lt;/div&gt;\n}\n</code></pre>"},{"location":"LangLab/typescript/installation/","title":"TypeScript Installation","text":"<p>install, load and activate <code>nvm</code> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n. ~/.nvm/nvm.sh\n</code></pre></p> <p>install <code>node.js</code> version 16 (compatible with <code>aws cdk</code>) <pre><code>nvm install 16\nnpm install -g npm@9.8.0\n</code></pre></p> <p>check versions <pre><code>node -v\nnpm -v\n</code></pre></p> <p>global typescript installation <code>npm i -g typescript</code></p>"},{"location":"Linux/awk/","title":"awk","text":"<p>awk: scripting language to manipulate text</p> <p>example text file (with turtle name, banner-color, personality), <code>tmnt.txt</code>: <pre><code>leonardo blue leader\nraphael red hothead\nmichelangelo orange party-animal\ndonatello purple geek\n</code></pre></p> <p>awk as default sees spaces as delimiters for fields.</p> <p>example, print everything: <code>awk '{print}' tmnt.txt</code> or (<code>0</code> represents the entire file), <code>awk '{print $0}' tmnt.txt</code></p> <p>example, show specific (first) field only: <code>awk '{print $1}' tmnt.txt</code></p> <p>example, show specific (third) field only: <code>awk '{print $3}' tmnt.txt</code></p> <p>example, print multiple fields (<code>1</code> and <code>3</code>): <code>awk '{print $1,$3}' tmnt.txt</code></p> <p>chaining commands into awk: <code>ls -l |\u00a0awk '{print $1}'</code></p> <p>example: <code>echo \"Hello from code-vault\" | awk '{print $1,$3}'</code></p> <p>example: getting last field using number of fields <code>NF</code> (in this case 3): <code>awk '{print $NF}' tmnt.txt</code></p> <p>example: no space delimiters this won't work: <code>awk '{print $2}' /etc/passwd</code> because, e.g.: <code>cat /etc/passwd | grep gus</code> instead, set a different field separator, <code>F</code>: <code>awk -F':' '{print $2}' /etc/passwd</code></p> <p>to find out which shell each user of the system is using, <code>awk -F':' '{print $1,$7}' /etc/passwd</code></p>"},{"location":"Linux/cut/","title":"cut","text":"<p>purpose: remove sections from lines within files</p> <p>example file, <code>message.txt</code>: <pre><code>TheNewThinkTank has recently reached 1,030 contributions in the last year! Wow!\n</code></pre></p> <p>example, print the first character of a file: <code>cut -b 1 message.txt</code></p> <p><code>-b</code>: select by byte <code>-c</code>: select by character <code>-d</code>: select by delimiter <code>-f</code>: select by field</p> <p>example, print the first character of a file: <code>cut -b 7,8,9,10,11 message.txt</code> better, if the characters are sequential: <code>cut -b 7-11 message.txt</code></p> <p>more consistently (to avoid if a character takes more than 1 byte), <code>cut -c 7-11 message.txt</code></p> <p>example: choose multiple character intervals: <code>cut -b 7-11,56,57-61 message.txt</code></p> <p>example, split a file by field: by default, tab <code>\\t</code> is the delimeter. change the delimeter to space instead: <code>cut -d \" \" -f 1,2 message.txt</code></p> <p>example: extract usernames <code>cat /etc/passwd</code></p> <p><code>cut -d \":\" -f 1 /etc/passwd</code></p> <p>cut is best used on files with multiple rows and fields</p>"},{"location":"Linux/data_streams/","title":"Data Streams","text":""},{"location":"Linux/data_streams/#standard-input-standard-output-standard-error","title":"standard input, standard output, standard error","text":"<p><code>stdin</code> e.g. keyboard commands <code>stdout</code> screen printout <code>stderr</code> when an error is displayed on screen (failed commands, e.g. command not found)</p> <p>Distinguishing between <code>stdout</code> and <code>stderr</code>: <code>echo $?</code> returncode 1: <code>stderr</code> returncode 0: <code>stdout</code></p> <p>example: following command will fail as it is not called with sudo: <code>find /etc -type f</code>. <code>echo $?</code> returns 1</p> <p><code>stdin</code> is represented by the number 0, <code>stdout</code> by 1 and <code>stderr</code> by 2. example: split <code>stdout</code> from <code>stderr</code> and handle them differently: <code>find /etc -type f 2&gt; /dev/null</code> <code>/dev/null</code> is a black hole; anything that is sent to <code>/dev/null</code> is never seen again.</p> <p>example: sent <code>stdout</code> to a file (it is implied): <code>find /etc -type f &gt; ~/results.txt</code> displays only <code>stderr</code>, but newly created file has all <code>stdout</code>.</p> <p>example: send <code>stdout</code> and <code>stderr</code> to two different files (overwrite): <code>find /etc -type f &gt; ~/results.txt 2&gt; ~/errors.txt</code></p> <p>example: append <code>stdout</code> and <code>stderr</code> to two different files: <code>find /etc -type f &gt;&gt; ~/results.txt 2&gt;&gt; ~/errors.txt</code></p>"},{"location":"Linux/file_and_dir_permissions/","title":"File and Directory Permissions","text":"<p><code>ls -l</code> shows the permissions string to the left. broken down into 4 groups, e.g. <code>drwxr-xr-x</code> or <code>-rw-rw-r--</code>. First group is a single character; <code>d</code>: directory <code>-</code>: file <code>l</code>: link</p> <p>next groups are 3 characters each. In order, they are: permissions for the user, the group and the other / world / everybody else <code>r</code>: read <code>w</code>: write <code>x</code>: execute</p>"},{"location":"Linux/file_and_dir_permissions/#modify-permissions","title":"Modify permissions","text":"<p>Suppose file <code>testfile.txt</code> contains the command <code>ls -l</code>,</p> <p>make file executable for everybody: <code>chmod +x testfile.txt</code></p> <p>remove execution permission for user: <code>chmod u-x testfile.txt</code></p> <p>remove execution permission for group: <code>chmod g-x testfile.txt</code></p> <p>remove execution permission for other: <code>chmod o-x testfile.txt</code></p> <p>make file executable for user: <code>chmod u+x testfile.txt</code></p> <p>remove read permission for group: <code>chmod g-r testfile.txt</code></p> <p>remove read permission for other: <code>chmod o-r testfile.txt</code></p> <p>remove write permission for group: <code>chmod g-w testfile.txt</code></p> <p>example: <code>chmod u-w testfile.txt</code> will make the following command fail: <code>echo \"https://github.com/TheNewThinkTank/code-vault\" &gt;&gt; testfile.txt</code> <code>chmod u+w testfile.txt</code> <code>echo \"https://github.com/TheNewThinkTank/code-vault\" &gt;&gt; testfile.txt</code> now the content was appended to the file.</p>"},{"location":"Linux/file_and_dir_permissions/#combining-chmod-commands","title":"Combining chmod commands","text":"<p>Allow group to read and write with a single command: <code>chmod g+rw testfile.txt</code></p>"},{"location":"Linux/file_and_dir_permissions/#bit-scores-numerical-representations-of-r-w-and-x","title":"Bit scores - numerical representations of r, w and x","text":"<p><code>r</code>: 4 <code>w</code>: 2  <code>x</code>: 1</p> <p>example <code>chmod 770 testfile.txt</code> results in permission string <code>-rwxrwx---</code></p> <p>generally, <code>chmod ??? testfile.txt</code> with <code>???</code> equal to <code>ugo</code>, user, group and other.</p> <p>example <code>ls -l Downloads/</code></p> <p>Recursively change permissions for all files in dir, without affecting the dir: <code>chmod 600 Downloads/*</code></p> <p>Use with caution, applies to everything beneath the object: <code>chmod -R 700 Downloads</code></p> <p>Or use <code>find</code> command for more granular controls</p>"},{"location":"Linux/file_and_dir_permissions/#change-ownership","title":"Change ownership","text":"<p>Change ownership of all files in <code>Downloads/</code> dir to <code>new-user</code> and <code>new-user-group</code> <code>sudo chown -R new-user:new-user-group Downloads/</code></p> <p>Shorthand (leaving out group defaults to the user's group): <code>sudo chown -R new-user: Downloads/</code></p>"},{"location":"Linux/find/","title":"find","text":"<p>search for any text file in home dir <code>find /home/gus -name *.txt</code></p> <p>omit cache files <code>find /home/gus -name *.txt | grep -v .cache</code></p> <p>only include files (from current dir) <code>find . -name Documents -type f</code></p> <p>only include dirs (from current dir) <code>find . -name Documents -type d</code></p> <p>delete files (from current dir) <code>find . -name Documents -type f -exec rm {} +</code></p> <p>remove execution permission on files in <code>Pictures</code> dir <code>find Pictures/ -type f -exec chmod 600 {} +</code></p> <p>set permissions on <code>Pictures</code> dir <code>find Pictures/ -type d -exec chmod 700 {} +</code></p> <p>example, clear logs <code>ls -l /var/log</code></p> <p>test / dryrun <code>sudo find /var/log -type f -name *.log</code></p> <p>if results look ok, execute <code>sudo find /var/log -type f -name *.log -exec truncate -s 0 {} +</code></p> <p>find any mp3 file in home dir and save to file <code>find . -name *.mp3 &gt; music.txt</code></p>"},{"location":"Linux/grep/","title":"grep","text":"<p>main purpose: search for text within files.</p> <p><code>grep</code>: global regular expression print</p> <p>number of lines in file: <code>cat /etc/ssh/sshd_config | wc -l</code></p> <p>seach for word in file: <code>cat /etc/ssh/sshd_config | grep Port</code></p> <p>seach for lines without specific word in file: <code>cat /etc/ssh/sshd_config | grep -v Port</code></p> <p>more directly: <code>grep Port /etc/ssh/sshd_config</code></p> <p>generally, <code>grep what where</code> or <code>grep word file</code></p> <p>exclusion: <code>grep -v Port /etc/ssh/sshd_config</code></p> <p>add line numbers: <code>grep -n Port /etc/ssh/sshd_config</code></p> <p>count, or number, of occurences: <code>grep -c Port /etc/ssh/sshd_config</code></p> <p>grep is case-sensitive: <code>grep port /etc/ssh/sshd_config</code></p> <p>remove case-sensitivity: <code>grep -i port /etc/ssh/sshd_config</code></p> <p>seach for word in all files in current dir: <code>grep word *</code> <code>grep -n word *</code></p> <p>recursive search (narrow <code>path</code> as much as possible): <code>grep -r word path</code> example with logs: <code>grep -ri Error /var/log</code></p>"},{"location":"Linux/history/","title":"History","text":"<p>up / down arrows to cycle through previous commands</p> <p><code>history</code></p> <p>each previous command has a number, which can be used to execute that command, e.g.: <code>!123</code>, if the command had number 123</p>"},{"location":"Linux/history/#avoid-a-command-from-showing-up-in-the-history","title":"avoid a command from showing up in the history","text":"<p>add a space in front, e.g. <code>groups</code> usefull if the command contains a password for example</p>"},{"location":"Linux/logs/","title":"Logs","text":"<p>text file with a lot of info about the system: <code>cat /var/log/syslog</code></p> <p><code>cd /var/log</code></p> <p>message log: <code>dmesg</code></p> <p>first 10 lines: <code>head /var/log/syslog</code></p> <p>last 10 lines: <code>tail /var/log/syslog</code></p> <p>last 50 lines: <code>tail -n 50 /var/log/syslog</code></p> <p>follow (last 10 lines, and follow the file for changes): <code>tail -f /var/log/syslog</code> example: <code>sudo systemctl restart ssh</code></p> <p><code>journalctl</code>, part of <code>systemd</code>. example: <code>journalctl -u ssh</code> where <code>u</code>: unit</p> <p>example: <code>journalctl -u apache2</code></p> <p>Alternatively, <code>cat /var/log/syslog | grep apache2</code></p> <p>example, follow unit: <code>journalctl -fu apache2</code></p> <p>obtionally, <code>sudo systemctl restart apache2</code></p>"},{"location":"Linux/main_distros/","title":"Main Linux Distributions","text":"<p>Linux is an open-source operating system that comes in various distributions, commonly known as \"distros.\" These distributions are developed and maintained by different organizations and communities, each with its own goals, design philosophies, and target audiences. Here are some major Linux distributions:</p>"},{"location":"Linux/main_distros/#ubuntu","title":"Ubuntu","text":"<p>Ubuntu is one of the most popular and user-friendly Linux distributions. It aims to provide an intuitive and accessible experience for desktop users. Ubuntu is known for its stability, extensive software repositories, and long-term support (LTS) releases.</p>"},{"location":"Linux/main_distros/#debian","title":"Debian","text":"<p>Debian is a highly respected and influential Linux distribution known for its stability, security, and adherence to the principles of free software. It serves as a base for many other distributions, including Ubuntu. Debian follows a release cycle focused on stability and reliability.</p>"},{"location":"Linux/main_distros/#fedora","title":"Fedora","text":"<p>Fedora is a community-driven Linux distribution sponsored by Red Hat. It focuses on integrating the latest software and technologies, making it a good choice for users who want cutting-edge features and developments. Fedora follows a rapid-release cycle and offers a new version approximately every six months.</p>"},{"location":"Linux/main_distros/#centos","title":"CentOS","text":"<p>CentOS (Community Enterprise Operating System) is a distribution built from the same source code as Red Hat Enterprise Linux (RHEL). It aims to provide a free and open-source alternative to RHEL, focusing on stability and long-term support. However, as of 2021, CentOS has undergone significant changes, transitioning to CentOS Stream, which is more aligned with RHEL development.</p>"},{"location":"Linux/main_distros/#arch-linux","title":"Arch Linux","text":"<p>Arch Linux is a lightweight and flexible distribution that follows a rolling-release model. It offers a minimalistic base system and a package manager called \"pacman,\" allowing users to customize their installations according to their preferences. Arch Linux is known for its simplicity, flexibility, and extensive documentation.</p>"},{"location":"Linux/main_distros/#opensuse","title":"openSUSE","text":"<p>openSUSE is a community-developed distribution sponsored by SUSE Linux GmbH. It focuses on stability, ease of use, and a polished desktop experience. openSUSE offers two main editions: Leap, which follows a regular release cycle, and Tumbleweed, a rolling-release edition with frequent updates.</p> <p>These are just a few examples of the major Linux distributions available. Each distribution has its own strengths and target audience, so it's worth exploring them further to find the one that best suits your needs and preferences.</p>"},{"location":"Linux/main_distros/#built-in-package-managers-of-the-above-linux-distributions","title":"built-in package managers of the above Linux distributions","text":""},{"location":"Linux/main_distros/#ubuntu_1","title":"Ubuntu","text":"<p>Package Manager: Ubuntu primarily uses the Advanced Package Tool (APT) as its package manager. APT provides a command-line interface and tools like apt-get and apt for managing packages. Practical Bash Commands: Update package lists: sudo apt update Install a package: sudo apt install  Remove a package: sudo apt remove  Search for a package: apt search"},{"location":"Linux/main_distros/#debian_1","title":"Debian","text":"<p>Package Manager: Debian also uses APT as its package manager, providing the same set of command-line tools. Practical Bash Commands: The commands are the same as those used in Ubuntu since Debian and Ubuntu share the same package management system.</p>"},{"location":"Linux/main_distros/#fedora_1","title":"Fedora","text":"<p>Package Manager: Fedora uses the DNF package manager (Dandified Yum) as its default package manager. DNF is the next-generation version of the Yum package manager. Practical Bash Commands: Update package lists: sudo dnf update Install a package: sudo dnf install  Remove a package: sudo dnf remove  Search for a package: dnf search"},{"location":"Linux/main_distros/#centos_1","title":"CentOS","text":"<p>Package Manager: Historically, CentOS used the Yum package manager, similar to Fedora. However, with the transition to CentOS Stream, it now uses DNF as its default package manager. Practical Bash Commands: The commands for CentOS are the same as those used in Fedora since CentOS Stream adopts many of Fedora's features.</p>"},{"location":"Linux/main_distros/#arch-linux_1","title":"Arch Linux","text":"<p>Package Manager: Arch Linux uses the Pacman package manager, which is known for its simplicity and speed. Practical Bash Commands: Update package lists: sudo pacman -Sy Install a package: sudo pacman -S  Remove a package: sudo pacman -R  Search for a package: pacman -Ss"},{"location":"Linux/main_distros/#opensuse_1","title":"openSUSE","text":"<p>Package Manager: openSUSE uses the Zypper package manager, which provides a command-line interface for managing packages. Practical Bash Commands: Update package lists: sudo zypper refresh Install a package: sudo zypper install  Remove a package: sudo zypper remove  Search for a package: zypper search  These commands should help you get started with package management on these Linux distributions. Remember to use sudo before administrative commands to execute them with root privileges."},{"location":"Linux/passwd/","title":"passwd","text":""},{"location":"Linux/passwd/#set-or-change-password","title":"Set or change password","text":"<p>For logged in user: <code>passwd</code> other users: <code>sudo passwd username</code></p>"},{"location":"Linux/passwd/#get-password-statistics","title":"Get password statistics","text":"<p><code>sudo passwd -S username</code></p>"},{"location":"Linux/passwd/#lock-password-for-user","title":"Lock password for user","text":"<p><code>sudo passwd -l username</code></p>"},{"location":"Linux/passwd/#unlock-password-for-user","title":"Unlock password for user","text":"<p><code>sudo passwd -u username</code></p>"},{"location":"Linux/passwd/#expire-password-after-30-days","title":"Expire password after 30 days","text":"<p><code>sudo passwd -x 30 username</code></p>"},{"location":"Linux/passwd/#expire-password-immediately","title":"Expire password immediately","text":"<p><code>sudo passwd -e username</code></p>"},{"location":"Linux/passwd/#delete-password-for-user","title":"Delete password for user","text":"<p><code>sudo passwd -d username</code></p>"},{"location":"Linux/sed/","title":"sed","text":"<p><code>sed</code>: stream editor use it to filter and modify text, e.g. in-place within text-files.</p> <p>example file, <code>tonics.txt</code>: <pre><code>Delicious tonic combinations:\n1. Ginger, Carrot, Apple\n2. Orange, Ginger, Lime\n3. Ginger, Pineapple, Blood orange\n4. Whey protein, Banana, Ginger\n5. Oat milk, Ginger\n</code></pre></p> <p>example: replace <code>Ginger</code> with <code>Lemon</code> from <code>tonics.txt</code>, without overwriting the file <code>sed 's/Ginger/Lemon/' tonics.txt</code></p> <p>example: replace file inplace: <code>sed -i 's/Ginger/Lemon/' tonics.txt</code></p> <p>delete word <code>sed 's/Ginger//' tonics.txt</code></p>"},{"location":"Linux/sed/#delimiters","title":"delimiters","text":"<p>if one of the characters you want to replace is a forward slash, <code>/</code>, use a different delimiter.</p> <p>example: <code>find /etc -type f &gt; paths.txt</code></p> <p><code>cat paths.txt</code></p> <p>deletion: <code>sed 's./etc..' paths.txt</code></p> <p>replacement: <code>sed 's./etc.something-else.' paths.txt</code></p> <p>example: <code>echo \"Code Vault\" | sed 's/Vault/Hive/'</code></p>"},{"location":"Linux/systemd/","title":"systemd","text":"<p>Most popular Linux init system. Controls units, e.g. services. Mostly interacted with through <code>systemctl</code>. Systemd is self-reliant and runs in the background.</p>"},{"location":"Linux/systemd/#systemctl","title":"systemctl","text":"<pre><code>sudo systemctl status service-name\nsudo systemctl start service-name\nsudo systemctl restart service-name\nsudo systemctl stop service-name\nsudo systemctl enable service-name\nsudo systemctl disable service-name\n</code></pre>"},{"location":"Linux/systemd/#unit-directory-priority","title":"Unit Directory Priority","text":"<ol> <li>/etc/systemd/system</li> <li>/run/systemd/system</li> <li>/lib/systemd/system</li> </ol>"},{"location":"Linux/tr/","title":"tr","text":"<p>tr - translate or delete characters.</p> <p>most often used together with other commands. example, make string all caps: <code>echo \"Code Vault\" | tr [a-z] [A-Z]</code> the first set <code>[a-z]</code> is replaced by the second set <code>[A-Z]</code>.</p> <p>alternatively, <code>echo \"Code Vault\" | tr [:lower:] [:upper:]</code></p> <p>alternatively, <code>tr [a-z] [A-Z] &lt; some-file.txt</code></p> <p>deletion (delete all lower-case characters): <code>echo \"Code Vault\" | tr -d [a-z]</code></p> <p>squeeze (<code>s</code>) out duplicate characters (e.g. k): <code>cat some-file.txt | tr -s \"k\"</code></p> <p>delete every alphabet character: <code>cat some-file.txt | tr -d [:alpha:]</code></p> <p>replace one character with another: <code>cat some-file.txt | tr \"$\" \"#\"</code></p>"},{"location":"SSH/commands/","title":"Commands","text":""},{"location":"SSH/commands/#ssh","title":"SSH","text":"<p>create ssh keypair: <code>ssh-keygen</code></p> <pre><code>cat .ssh/id_rsa\ncat .ssh/id_rsa.pub\nmkdir projects &amp; cd projects/\ncd ~/.ssh\ncp id_rsa.pub authorized_keys\n</code></pre>"},{"location":"aws/cdk/","title":"CDK","text":""},{"location":"aws/cdk/#useful-commands","title":"useful commands","text":"<pre><code># installation\nnpm install -g aws-cdk\n\n# start a new cdk app\ncdk init app --language typescript\n\n# synthesize cdk stack into CloudFormation\ncdk synth\n\n# deploy to aws\ncdk deploy\n\n# compare changes to previous deploy\ncdk diff\n</code></pre>"},{"location":"aws/cdk/#useful-resources","title":"useful resources","text":"<p>getting started</p> <p>cdk patterns</p> <p>cdk day</p>"},{"location":"aws/cdk/#terms","title":"terms","text":"<p><code>bootstrap</code> an AWS environment prerequisit for being able to deploy CDK stacks into said account. provisions certain AWS resources used during deployment. <code>cdk bootstrap ACCOUNT-NUMBER-1/REGION-1 ACCOUNT-NUMBER-2/REGION-2 ...</code></p> <p><code>environment</code>: An environment is the target AWS account and Region into which the CDK stack is intended to be deployed recommended to explicitly specify the environment for each stack in app: <pre><code>const envEU  = { account: '2383838383', region: 'eu-central-1' };\nconst envUSA = { account: '8373873873', region: 'us-east-1' };\n\nnew MyFirstStack(app, 'first-stack-us', { env: envUSA });\nnew MyFirstStack(app, 'first-stack-eu', { env: envEU });\n</code></pre></p>"},{"location":"aws/cdk/#deploy-cdk-stack-to-multiple-environments","title":"deploy CDK stack to multiple environments:","text":"<p>override the account and Region at synthesis time: <pre><code>new MyDevStack(app, 'dev', { \n  env: { \n    account: process.env.CDK_DEPLOY_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT, \n    region: process.env.CDK_DEPLOY_REGION || process.env.CDK_DEFAULT_REGION \n}});\n</code></pre></p> <p>set the variables from command line arguments, <code>cdk-deploy-to.sh</code>: <pre><code>#!/usr/bin/env bash\nif [[ $# -ge 2 ]]; then\n    export CDK_DEPLOY_ACCOUNT=$1\n    export CDK_DEPLOY_REGION=$2\n    shift; shift\n    npx cdk deploy \"$@\"\n    exit $?\nelse\n    echo 1&gt;&amp;2 \"Provide account and region as first two args.\"\n    echo 1&gt;&amp;2 \"Additional args are passed through to cdk deploy.\"\n    exit 1\nfi\n</code></pre> execute <code>chmod +x cdk-deploy-to.sh</code> to make it executable.</p> <p>deploy to multiple environments, <code>cdk-deploy-to-prod.sh</code>: <pre><code>#!/usr/bin/env bash\n./cdk-deploy-to.sh 135792468 us-east-1 \"$@\" || exit\n./cdk-deploy-to.sh 246813579 eu-central-1 \"$@\"\n</code></pre></p>"},{"location":"aws/cdk/#projen","title":"projen","text":""},{"location":"aws/cdk/#constructs","title":"constructs","text":""},{"location":"aws/cdk/#examples","title":"examples","text":""},{"location":"aws/cli/","title":"AWS CLI version 2","text":""},{"location":"aws/cli/#installation","title":"Installation","text":"<p>to install on macOS for all users: <pre><code>curl \"https://awscli.amazonaws.com/AWSCLIV2.pkg\" -o \"AWSCLIV2.pkg\"\nsudo installer -pkg AWSCLIV2.pkg -target /\n</code></pre></p> <p>verify that the shell can find and run the aws command in your $PATH: <pre><code>which aws\naws --version\n</code></pre></p>"},{"location":"aws/cli/#configuration","title":"Configuration","text":"<p>configure credentials: <code>aws configure</code> this creates a default user in the <code>.aws/credentials</code> file. for a non-default / named user: <code>aws configure --profile code-vault-member</code></p>"},{"location":"aws/cli/#example-commands","title":"Example commands","text":"<p>S3: <pre><code># list buckets\naws s3 ls\n\n# list objects in bucket\naws s3 ls s3://foo target-filename\n\n# copy object\naws s3 cp s3://foo\n\n# sync from local dir to bucket\naws s3 sync . s3://mybucket\n\n# sync between buckets\naws s3 sync s3://mybucket s3://mybucket2\n\n# sync from bucket to local dir\naws s3 sync s3://mybucket .\n\n# sync from local dir to bucket and delete files that exist in destination but not in source\naws s3 sync . s3://mybucket --delete\n</code></pre></p>"},{"location":"aws/certs/devops_engineer_pro/","title":"DevOps Engineer Pro","text":"Domain 1: SDLC Automation    ## Implement CI/CD pipelines   - SDLC concepts, phases, and model   - deployment patterns   - CodeCommit   - CodeBuild   - CodeArtifact   - Secrets Manager   - Systems Manager Parameter Store   - CodeDeploy    ## Integrate automated testing into CI/CD pipelines   - automated testing   - unit tests, integration tests, acceptance tests, user interface tests, security scans"},{"location":"aws/certs/devops_engineer_pro/#domain-2-configuration-management-and-iac","title":"Domain 2: Configuration Management and IaC","text":""},{"location":"aws/certs/devops_engineer_pro/#domain-3-resilient-cloud-solutions","title":"Domain 3: Resilient Cloud Solutions","text":""},{"location":"aws/certs/devops_engineer_pro/#domain-4-monitoring-and-logging","title":"Domain 4: Monitoring and Logging","text":""},{"location":"aws/certs/devops_engineer_pro/#domain-5-incident-and-event-response","title":"Domain 5: Incident and Event Response","text":""},{"location":"aws/certs/devops_engineer_pro/#domain-6-security-and-compliance","title":"Domain 6: Security and Compliance","text":""},{"location":"aws/containerization/ecr_ecs/","title":"ECR","text":""},{"location":"aws/containerization/ecr_ecs/#ecs","title":"ECS","text":""},{"location":"aws/containerization/ecr_ecs/#task","title":"Task","text":""},{"location":"aws/containerization/ecr_ecs/#task-definition","title":"Task Definition","text":""},{"location":"aws/containerization/ecr_ecs/#cluster","title":"Cluster","text":""},{"location":"aws/containerization/ecr_ecs/#service","title":"Service","text":""},{"location":"aws/containerization/ecr_ecs/#fargate","title":"Fargate","text":""},{"location":"aws/ec2/ec2_overview/","title":"EC2 overview","text":""},{"location":"aws/ec2/ec2_overview/#pricing-options","title":"Pricing Options","text":"<p><code>DORS</code> - Dedicated (most expensive) - On-Demand (pay by the hour or second) - Reserved (reserve for 1-3 years. up to 72% discount) - Spot (purchase unused capacity. up to 90 % discount)</p>"},{"location":"aws/ec2/ec2_overview/#instance-types","title":"Instance Types","text":"<ul> <li>R: RAM</li> <li>C: CPU</li> <li>M: \"medium\", balanced</li> <li>I: I/O</li> <li>G: GPU</li> <li>T2/T3: burstable</li> </ul> <p>Instance overview</p>"},{"location":"aws/ec2/ec2_overview/#related-services","title":"Related Services","text":"<ul> <li>ASG</li> <li>ELB</li> <li>EBS</li> <li>EFS</li> </ul>"},{"location":"aws/ec2/ec2_overview/#relevant-knowledge","title":"Relevant Knowledge","text":"<ul> <li>SSH (e.g. <code>ssh ec2-user@&lt;IP&gt; -i &lt;rsa-key.pem&gt;</code>)</li> <li>User Data / bootstrapping</li> </ul>"},{"location":"aws/ec2/ec2_overview/#metadata","title":"Metadata","text":"<p>Data about the EC2 instance. Inspect: <code>curl http://&lt;IP&gt;/latest/meta-data/</code> e.g. getting the IP: <code>curl http://&lt;IP&gt;/latest/meta-data/public-ipv4</code></p> <p>Similarly, <code>user-data</code> can also be queried: <code>curl http://&lt;IP&gt;/latest/user-data</code></p>"},{"location":"aws/ec2/ec2_overview/#todo-amis","title":"TODO: AMI's","text":""},{"location":"aws/ec2/ec2_overview/#todo-image-builder","title":"TODO: Image Builder","text":""},{"location":"aws/ec2/ec2_overview/#todo-placement-groups","title":"TODO: placement groups","text":""},{"location":"database/db/","title":"Database","text":"<p>RDBMS / SQL</p> <p>NoSQL: - neo4j (graph) - mongoDB (document) - cassandra - redis - dynamoDB (key-value)</p> <p>ACID: - Atomicity (all-or-nothing) - Consistency - Isolation - Durability</p> <p>CRUD: - Create - Read - Update - Delete</p> <p>sharding vs replication</p> <p>CAP theorem: - Consistency - Availability - Partition (Network)</p> <p>PAC ELC theorem: Partition, yes (PAC): - Availability - Consistency no (ELC): - Latency - Consistency</p>"},{"location":"database/sql/","title":"SQL","text":""},{"location":"database/sql/#style-guides","title":"Style guides","text":"<p>Gitlab IBM Mozilla Simon Holywell</p>"},{"location":"database/sql/#ddl-data-definition-language","title":"DDL (Data Definition Language)","text":"<ul> <li>CREATE</li> <li>ALTER</li> <li>DROP</li> <li>RENAME</li> <li>TRUNCATE</li> <li>COMMENT</li> </ul>"},{"location":"database/sql/#dml-data-manipulation-language","title":"DML (Data manipulation Language)","text":"<ul> <li>SELECT</li> <li>INSERT</li> <li>UPDATE</li> <li>DELETE</li> <li>MERGE</li> <li>CALL</li> <li>EXPLAIN PLAN</li> <li>LOCK TABLE</li> </ul>"},{"location":"database/sql/#dcl-data-control-language","title":"DCL (Data Control Language)","text":"<ul> <li>GRANT</li> <li>REVOKE</li> </ul>"},{"location":"database/sql/#tcl-transaction-control-language","title":"TCL (Transaction Control Language)","text":"<ul> <li>COMMIT</li> <li>ROLLBACK</li> <li>SAVE POINT</li> <li>SET</li> <li>TRANSACTION</li> </ul>"},{"location":"database/sql/#basic-querying","title":"Basic querying","text":"<pre><code>SELECT *\nFROM table_a\nWHERE 1=1\n  AND condition\n</code></pre>"},{"location":"database/sql/#joins","title":"Joins","text":""},{"location":"database/sql/#sql-injections","title":"SQL injections","text":""},{"location":"docker/docker-compose/","title":"docker-compose","text":""},{"location":"docker/docker-compose/#official-ref","title":"official ref","text":"<p>https://docs.docker.com/compose/compose-file/</p>"},{"location":"docker/docker-compose/#run-commands","title":"run commands","text":"<pre><code>docker compose up --build\nsudo docker-compose up -d\nsudo docker-compose down\nsudo docker-compose stop\nsudo docker-compose ps\n</code></pre>"},{"location":"docker/docker-compose/#docker-composeyaml","title":"docker-compose.yaml","text":"<pre><code>version: \"3\"\nservices:\n  website:\n    image:\n    ports:\n      - \"\"\n    restart: always\n  website2:\n    image:\n    ports:\n      - \"\"\n    restart: always\n    networks:    \nnetworks: \n</code></pre>"},{"location":"docker/docker/","title":"Docker","text":""},{"location":"docker/docker/#initialize-new-docker-project","title":"initialize new docker project","text":"<p><code>docker init</code></p>"},{"location":"docker/docker/#dockerfile","title":"Dockerfile","text":"<p>env vars (ARG and ENV): <code>ARG [variable-name]=[default-value]</code></p> <p>Modify ARG Value with docker build: If you did not provide a value for the ARG variable or want to modify the default value while building the image, use the --build-arg option.</p> <p><code>docker build -t [image-name] --build-arg [arg-variable]=[value] .</code></p> <p>Similarly, <code>ENV [variable-name]=[default-value]</code> (While the ARG variable is unavailable after the image-building process, ENV persists in the containers.)</p>"},{"location":"docker/docker/#images","title":"Images","text":"<p>Build image: <code>docker build --tag python-django .</code></p> <p><code>--tag</code>: set a name for the image</p> <p>list images: <code>docker images</code></p> <p>remove image: <code>docker rmi &lt;container-id&gt;</code></p>"},{"location":"docker/docker/#containers","title":"Containers","text":"<p>start container: <code>docker run --rm -ti --publish 8000:8000 python-django</code></p> <p><code>d</code>: background <code>t</code>: terminal (log messages) <code>i</code>: interactive <code>--rm</code>: remove previous containers with same name if they exist</p> <p>list running containers: <code>docker ps</code></p> <p>stop container: <code>docker stop &lt;container-id&gt;</code></p> <p>list or remove stopped containers: <pre><code>docker ps --filter status=exited -q\ndocker rm $(docker ps -q)\ndocker rm $(docker ps --filter status=exited -q)\n</code></pre></p>"},{"location":"docker/docker/#todo-add-example-with-volume-mount-in-docker-run-command","title":"TODO: add example with volume mount, in docker run command","text":""},{"location":"k8s/k8s/","title":"Kubernetes","text":""},{"location":"k8s/k8s/#concepts","title":"Concepts","text":"<ul> <li>cluster</li> <li>nodes (servers): control servers/master (hosts the k8s API) and worker nodes (running the application workloads)</li> <li>pods: has 1 IP address, a bit of storage, and can contain 1 or more containers</li> <li>(Docker) containers</li> </ul>"},{"location":"k8s/k8s/#tools","title":"Tools","text":"<p>etcd (pods) (data store for kubernetes controller/master server(s)): provides distributed synchronized data storage for the cluster state</p> <p>kube-apiserver</p> <p>kube-scheduler</p> <ul> <li> <p>KubeAdm</p> </li> <li> <p>kubelet: runs as a service. Controls the pods e.g. <code>sudo systemctl status kubelet</code></p> </li> <li> <p>kubectl</p> </li> <li> <p>kube-proxy (part of handling the virtual network of the cluster)</p> </li> </ul> <p><code>kubectl get pods -n kube-system</code> <code>kubectl get nodes</code> <code>kubectl get deployments</code> <code>kubectl describe deployment nginx-deployment</code></p> <p>Get pod info (containers running inside etc.) <code>kubectl describe pod nginx</code> <code>kubectl delete pod nginx</code></p> <ul> <li>helmchart</li> <li>Kustomize</li> <li>Argo CD https://argo-cd.readthedocs.io/en/stable/</li> </ul> <p>services</p> <p>IaC: Pulumi or Terraform</p>"},{"location":"k8s/k8s/#networking","title":"Networking","text":"<p>Virtual network that spans the entire cluster (all nodes). Logically separate fromn the physical network that connects one node to another.</p>"},{"location":"k8s/minikube_notes/","title":"MiniKube","text":""},{"location":"k8s/minikube_notes/#prerequisites","title":"prerequisites","text":"<p>Docker installed</p> <p>kubectl installed</p> <p>download minikube (macOS): https://github.com/kubernetes/minikube/releases/download/v1.32.0/minikube-darwin-arm64</p> <p>move it to: <code>/usr/local/bin/minikube</code></p> <p>as the minikube binary is unnotarized, open it in finder, right-click, and manually open it first time.</p> <p>then <code>chmod +x minikube</code></p>"},{"location":"k8s/minikube_notes/#useful-commands","title":"useful commands","text":"<p>start the Docker Daemon <code>open -a Docker</code></p> <p>check it is running <code>docker ps</code></p> <p>optionally, check the status of the Docker Daemon <code>docker info</code></p> <p>start the minikube cluster <code>minikube start</code></p> <p>inspect nodes and pods <code>kubectl get nodes</code> <code>kubectl get pods</code></p> <p>get all pods: <code>kubectl get po -A</code></p> <p><code>minikube dashboard</code></p>"},{"location":"shell/bash/","title":"BASH","text":""},{"location":"shell/bash/#bash-dir-compression","title":"BASH dir compression","text":"<p>create an archive file called foo.tar.gz in current directory <code>tar -zcvf foo.tar.gz /home/jerry/tom</code></p> <p>to restore/extract all files from archive in current directory <code>tar -zxvf foo.tar.gz</code></p>"},{"location":"shell/bash/#basic-commands","title":"Basic commands","text":"<p>clear screen: <code>Ctrl + l</code> change to home dir: <code>cd ~</code> change to previous dir: <code>cd -</code> change directory and swap back again: <code>pushd /some_dir</code>, then <code>popd</code> minimize program to the background (e.g. if working on file that's not ready to be saved): <code>Ctrl + z</code> then send it back to the foreground again:<code>fg</code> monitor system resources: <code>htop</code></p> <pre><code>echo, cat, touch,\nwhoami, pwd, ls -la\nmkdir, rmdir, rm, rm -rf\nsudo, su, sudo -i\nsudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre> <pre><code>echo $TERM\nvisudo\n</code></pre> <p>sudos</p> <p>logout user: Ctrl + d</p> <pre><code>man\nwhatis\nwhich\nwhereis\n\nwget\ncurl\n\nzip\nunzip\n\nhead\ntail\nless\n\ncmp\ndiff\n\ntree -&gt; tree.txt\n\nsort\n\nPipe |\n\nfind\ngrep\nsed\nawk\n\nchmod\nchown\n</code></pre>"},{"location":"shell/bash/#networking","title":"Networking","text":"<pre><code>ifconfig\nip address |\u00a0grep eth0\nping -c 5 -s 500 url\ntraceroute url\n\nnetstat -tulpn\nss -tulpn\n\nsudo ufw allow 80\nsudo ufw status\n\nuname -a\n\nsudo apt install neofetch\n````\n\n```BASH\ncal\n\necho \u201c4+5\u201d | bc\n\nfree\n\ndf -H\n\nps -aux\ntop\nkill\npkill -p name\nsystemctl start\n\nhistory\nreboot\nshutdown -h now\n</code></pre>"},{"location":"shell/bash/#vs-code","title":"VS Code","text":"<p>new terminal: <code>Ctrl + \u00e6</code> (Win) | <code>Shift + Ctrl + `</code> (Mac)</p>"},{"location":"shell/bash_scripting/","title":"Bash Scripting","text":"<p>command interpreter / shell</p> <p>return to previous dir <code>cd -</code></p> <p>move to <code>some-dir</code> and return at any moment <pre><code>pushd &lt;some-dir&gt;\npopd\n</code></pre></p> <p>move to background, and bring up again <pre><code>Ctrl + Z\nfg\n</code></pre></p> <p>reverse search through history <code>Ctrl + R</code></p> <p>add timestamp to history. Ignore commands if started by whitespace <pre><code>vim ~/.bashrc\nHISTTIMEFORMAT=\"%Y-%m-%d %T \"\nHISTCONTROL=ignoreboth\n</code></pre></p> <p>run 2 commands in a row <code>ls -l; echo \"i am the second command\"</code></p> <p>only run second command if first succeeds <code>ls -l &amp;&amp; echo \"i am the second command\"</code></p> <p>follow log-file in real-time <code>tail -f &lt;some-log-file&gt;</code></p> <p>delete content of file <code>truncate -s 0 &lt;some-file&gt;</code></p> <p>ensure output is columnized <code>mount |\u00a0column -t</code></p> <p>find out which shell is used from a given terminal window: <code>echo $SHELL</code></p> <p>find the location of bash: <code>which bash</code></p> <p>create file <code>vim some_file.sh</code></p> <p>add shebang to top of file <code>#!/usr/env/bin bash</code></p> <p>make the file executable <code>sudo chmod +x some_file.sh</code></p> <p>variables</p> <p>if statements</p> <p>while loops</p> <p>math functions</p> <p>exit codes</p> <p>for loops</p> <p>functions</p> <p>case statements</p> <p>scheduling jobs</p> <p>arguments</p>"},{"location":"shell/cmd/","title":"CMD","text":""},{"location":"shell/cmd/#see-command-line-history-in-cmd","title":"See command line history in cmd","text":"<p><code>F7</code></p>"},{"location":"shell/cmd/#or-to-see-the-command-history-in-the-command-prompt-itself","title":"or, to see the command history in the command prompt itself:","text":"<p><code>doskey /history</code></p>"},{"location":"shell/cmd/#and-send-to-clipboard","title":"and send to clipboard:","text":"<p><code>doskey /history | clip</code></p>"},{"location":"shell/cmd/#delete-empty-folder","title":"Delete empty folder","text":"<p><code>rmdir folder_name</code></p>"},{"location":"shell/cmd/#delete-non-empty-folder","title":"Delete non-empty folder","text":"<p><code>rmdir /S folder_name</code></p>"},{"location":"shell/cmd/#get-ip-address-form-server-name","title":"Get IP address form server-name:","text":"<p><code>nslookup server-name</code></p>"},{"location":"shell/nano/","title":"Nano","text":"<p>create file <code>nano some_file.txt</code></p> <p>save file <code>Ctrl + O</code></p> <p>exit file <code>Ctrl + X</code></p> <p>cut line <code>Ctrl + K</code></p> <p>undo / paste line <code>Ctrl + U</code></p> <p>search for word <code>Ctrl + W</code> or line number <code>Ctrl + T</code></p> <p>Spell-check specific line (needs the spell package) <code>Ctrl + T</code></p> <p>open file at specific line <code>nano +&lt;line-number&gt; some_file.txt</code></p> <p>open file in view-only mode <code>nano -v some_file.txt</code></p>"},{"location":"shell/powershell/","title":"Powershell","text":""},{"location":"shell/powershell/#networking","title":"Networking","text":"<p><code>ipconfig /all | clip</code></p>"},{"location":"software-development/concepts/","title":"Concepts","text":"<p>monads (e.g. writer)</p> <p>memoization</p> <p>currying</p> <p>closures</p> <p>DRY</p> <p>SOLID: - Single responsibility - Open (for extention) / Closed (for modification) - Liskov substitution - Interface segregation - Dependency inversion</p> <p>LoD (Law of Demeter): principle of least knowledge</p> <p>Big-O</p> <p>OOP: inheritance, polymorphism, encapsulation, abstraction</p> <p>(semantic commits)[https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716]</p> <p>(conventional commits)[https://www.conventionalcommits.org/en/v1.0.0/]</p> <p>git bash integrations (aliases etc.)</p>"},{"location":"software-development/data-structures/","title":"Data Structures","text":"<p>Hash map</p> <p>linked list</p> <p>Queue</p> <p>Deque</p> <p>Graph</p> <p>Tree</p>"},{"location":"software-development/design-patterns/","title":"Design Patterns","text":""},{"location":"software-development/design-patterns/#resources","title":"Resources","text":"<ul> <li>(Refactoring.Guru)[https://refactoring.guru/design-patterns]</li> </ul> <p>GoF introduced 23 design patterns in 1994, falling into three categories:</p>"},{"location":"software-development/design-patterns/#creational","title":"creational","text":"<ul> <li>Abstract Factory</li> <li>Builder</li> <li>Factory Method</li> <li>Prototype</li> <li>Singleton</li> </ul>"},{"location":"software-development/design-patterns/#structural","title":"structural","text":""},{"location":"software-development/design-patterns/#behavioral","title":"behavioral","text":"<ul> <li>Observer</li> <li>Iterator</li> </ul>"}]}